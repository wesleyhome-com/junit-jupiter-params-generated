/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    kotlin("jvm")
    `java-library`
    `maven-publish`
    signing
    id("org.jetbrains.dokka-javadoc")
}
group = "com.wesleyhome.test"
val versionString = providers.gradleProperty("version").get()
version = versionString

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
}
val dokkaJavadocJar: Jar by tasks.register<Jar>("javadocJar") {
    dependsOn(tasks.dokkaGenerateModuleJavadoc)
    from(tasks.dokkaGenerateModuleJavadoc.flatMap { it.outputDirectory })
    archiveClassifier.set("javadoc")
}

kotlin {
    jvmToolchain(17)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

publishing {
    publications {
        val description = """
            Library to help generate test parameter permutations for parameterized tests in JUnit.
            This version is an initial attempt to convert to building with Gradle.
        """.trimIndent()

        create<MavenPublication>("mavenJava") {
            from(components["java"])
            artifact(dokkaJavadocJar)
            pom {
                this.description.set(description)
                this.name = "Generated JUnit Jupiter Parameters"
                this.url = "https://github.com/justin-wesley/junit-jupiter-params-generated"
                scm {
                    connection = "scm:git:https://github.com/justin-wesley/junit-jupiter-params-generated.git"
                    developerConnection = "scm:git:https://github.com/justin-wesley/junit-jupiter-params-generated.git"
                    url = "https://github.com/justin-wesley/junit-jupiter-params-generated.git"
                    tag = "HEAD"
                }
                developers {
                    developer {
                        id = "justin"
                        name = "Justin Wesley"
                        roles = listOf("Software Development Engineer")
                    }
                }
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
            }
        }
    }
}

signing {
    setRequired { !project.version.toString().endsWith("-SNAPSHOT") && !project.hasProperty("skipSigning") }
    if(isOnCIServer()) {
        val signingKey: String? by project
        if((signingKey?.length ?: 0) <= 0){
            throw RuntimeException("No Signing Key")
        }
        useInMemoryPgpKeys(signingKey, "")
    }
    sign(publishing.publications["mavenJava"])
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"

    setDestinationDir(file("$buildFile/javadoc"))
    if (JavaVersion.current().isJava9Compatible) {
        (options as StandardJavadocDocletOptions).apply {
            addBooleanOption("html5", true)
        }
    }
}

fun isOnCIServer() = System.getenv("CI") == "true"
